{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","placeholder","Tasks","props","tasks","map","task","done","hideDoneTasks","content","Buttons","length","Fragment","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAUeA,G,UAPF,kBACT,0BAAMC,UAAU,QACZ,2BAAOA,UAAU,cAAcC,YAAY,uBAC3C,4BAAQD,UAAU,gBAAlB,UCiBOE,G,MApBD,SAACC,GAAD,OACZ,wBAAIH,UAAU,SACXG,EAAMC,MAAMC,KAAI,SAAAC,GAAI,OACnB,wBACAN,UAAS,qBAAgBM,EAAKC,MAAQJ,EAAMK,cAAgB,uBAAyB,GAA5E,MAEP,4BAAQR,UAAU,2CACTM,EAAKC,KAAO,SAAM,IAEnB,0BAAMP,UAAS,wBAAoBM,EAAKC,KAAO,yBAA2B,KACzED,EAAKG,SAEN,4BAAQT,UAAU,uCAAlB,iBCQDU,G,MApBC,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAOI,EAAV,EAAUA,cAAV,OACd,yBAAKR,UAAU,WACZI,EAAMO,OAAS,GACd,kBAAC,IAAMC,SAAP,KAEE,4BAAQZ,UAAU,0CACfQ,EAAgB,OAAS,OAD5B,SAGA,4BACER,UAAU,kBACVa,SAAUT,EAAMU,OAAM,qBAAGP,SAF3B,gBCOOQ,G,MAfC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMC,EAAf,EAAeA,mBAAf,OACZ,6BAASlB,UAAU,WACnB,4BAAQA,UAAU,mBACd,wBAAIA,UAAU,kBAAkBgB,GAC/BE,GAIL,yBAAKlB,UAAU,iBACViB,MCHME,EANA,SAAC,GAAD,IAAEH,EAAF,EAAEA,MAAF,OACX,gCACI,4BAAKA,KCIEI,G,MANG,SAACjB,GAAD,OACd,0BAAMH,UAAU,aACXG,EAAMkB,YCITjB,EAAQ,CACZ,CAAEkB,GAAI,EAAGb,QAAS,eAAgBF,MAAM,GACxC,CAAEe,GAAI,EAAGb,QAAS,gBAAiBF,MAAM,IA0B5BgB,MArBf,WACE,OACE,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAQP,MAAM,eACd,kBAAC,EAAD,CACEA,MAAM,6BACNC,KAAM,kBAAC,EAAD,QAER,kBAAC,EAAD,CACED,MAAM,SACNC,KAAM,kBAAC,EAAD,CAAOb,MAAOA,EAAOI,eAbb,IAcdU,mBACE,kBAAC,EAAD,CAASd,MAAOA,EAAOI,eAfX,QCFFgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.190e6dd1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Form = () => (\n    <form className=\"form\">\n        <input className=\"form__input\" placeholder=\"What's left to do?\" />\n        <button className=\"form__button\">Add</button>\n    </form>\n)\n\nexport default Form;","import React from \"react\";\nimport \"./style.css\";\n\nconst Tasks = (props) => (\n  <ul className=\"tasks\">\n    {props.tasks.map(task => (\n      <li \n      className={`tasks__item${task.done && props.hideDoneTasks ? \" tasks__item--hidden\" : \"\"} `}\n      >\n        <button className=\"tasks__button tasks__button--toggleDone\"> \n                {task.done ? \"✓\" : \"\"}\n                </button>\n                <span className={`tasks__content${ task.done ? \" tasks__content--done \" : \"\"}`}>\n                {task.content}\n                </span>\n                <button className=\"tasks__button tasks__button--remove\">\n                    ✗\n                </button>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default Tasks;","import React from \"react\";\nimport \"./style.css\";\n\nconst Buttons = ({ tasks, hideDoneTasks }) => (\n  <div className=\"buttons\">\n    {tasks.length > 0 && (\n      <React.Fragment>\n\n        <button className=\"buttons__button js-toggleHideDoneTasks\">\n          {hideDoneTasks ? \"Show\" : \"Hide\"} done\n        </button>\n        <button\n          className=\"buttons__button\"\n          disabled={tasks.every(({ done }) => done)}\n        >\n          Mark All\n        </button>\n      </React.Fragment>\n\n    )}\n  </div>\n);\n\nexport default Buttons;","import React from \"react\";\nimport \"./style.css\";\n\nconst Section = ({title, body, extraHeaderContent}) => (\n    <section className=\"section\">\n    <header className=\"section__header\">\n        <h2 className=\"section__title\">{title}</h2>\n        {extraHeaderContent}\n    </header>\n\n\n    <div className=\"section__body\">\n        {body}\n    </div>\n\n</section>\n)\n\nexport default Section;","import React from \"react\";\n\n\nconst Header = ({title}) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n)\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\"\n\nconst Container = (props) => (\n    <main className=\"container\">\n        {props.children}\n    </main>\n);\n\nexport default Container;","import React from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from './Buttons';\nimport Section from './Section';\nimport Header from './Header';\nimport Container from \"./Container\";\n\n\nconst tasks = [\n  { id: 1, content: \"walk the dog\", done: false },\n  { id: 2, content: \"eat breakfast\", done: true },\n];\n\nconst hideDoneTasks = false;\n\nfunction App() {\n  return (\n    <Container>\n\n      <Header title=\"To Do List\" />\n      <Section\n        title=\"Add a new task to the list\"\n        body={<Form />}\n      />\n      <Section\n        title=\"To Do:\"\n        body={<Tasks tasks={tasks} hideDoneTasks={hideDoneTasks} />}\n        extraHeaderContent={\n          <Buttons tasks={tasks} hideDoneTasks={hideDoneTasks} />\n        }\n      />\n\n    </Container>\n  );\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}